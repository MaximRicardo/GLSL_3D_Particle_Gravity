#version 430 core

layout (std430, binding=0) buffer particle_positions_buffer {
    vec4 particle_positions[];
};

layout (std430, binding=1) buffer particle_lighting_buffer {
    float particle_lighting[];
};

layout (std430, binding=2) buffer particle_velocities_buffer {
    vec4 particle_velocities[];
};

layout (std430, binding=4) readonly buffer particle_radii_buffer {
    float particle_radii[];
};

uniform float particle_mass;
uniform float particle_light_strength;

uniform float G;

uniform float delta_time;

uniform int n_particles;

uniform vec3 cam_pos;

uniform bool paused;

const float PI = 3.141592;
const float epsilon = 0.1f;
const float epsilon2 = epsilon*epsilon;

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

float distance_squared(vec3 a, vec3 b) {
    vec3 c = a-b;
    return dot(c, c);
}

void gravity(int thread_idx, int other_idx, inout vec3 acceleration) {

    bool is_same = thread_idx == other_idx;

    vec3 diff = particle_positions[other_idx].xyz - particle_positions[thread_idx].xyz;

    float dist_squared = distance_squared(particle_positions[thread_idx].xyz, particle_positions[other_idx].xyz) + epsilon2;
    float dist_sixth = dist_squared*dist_squared*dist_squared;
    float inv_dist_cube = 1.0/sqrt(dist_sixth);
    float s = G*particle_mass*inv_dist_cube;

    acceleration.xyz += diff*s*float(!is_same);

}

void compute_light(int thread_idx, int i, float cam_dist) {
    
    bool is_same = thread_idx == i;
    float inv_dist_squared = 1.0/(distance_squared(particle_positions[thread_idx].xyz, particle_positions[i].xyz)+float(is_same));  //Prevent division by 0 if it is the same particle

    float other_visible_radius = clamp(particle_radii[i] * cam_dist*(1.0/250.0), particle_radii[i]*(1.0/10.0), particle_radii[i]);
    particle_lighting[thread_idx] += ((2.0*PI*pow(other_visible_radius,2.0))*particle_light_strength * inv_dist_squared)*float(!is_same);

}

void main() {

    int thread_idx = int(gl_GlobalInvocationID.x);
    if (thread_idx >= n_particles) return;

    float cam_dist = distance(cam_pos.xyz, particle_positions[thread_idx].xyz);

    particle_lighting[thread_idx] = pow(particle_radii[thread_idx],2.0)*particle_light_strength;
    vec3 acceleration = vec3(0.0, 0.0, 0.0);

    if (!paused) {
        for (int i = 0; i < n_particles; i++) {
            gravity(thread_idx, i, acceleration); //Not doing this if the program is paused lowers the fps by about 5 - 10 on my machine.
            
            compute_light(thread_idx, i, cam_dist);
        }
    }
    else {
        for (int i = 0; i < n_particles; i++) {
            compute_light(thread_idx, i, cam_dist);
        }
    }

    //Apply acceleration and velocity
    if (!paused) {
        particle_velocities[thread_idx].xyz += acceleration.xyz*delta_time;
        particle_positions[thread_idx].xyz += particle_velocities[thread_idx].xyz*delta_time;
    }
    
}
